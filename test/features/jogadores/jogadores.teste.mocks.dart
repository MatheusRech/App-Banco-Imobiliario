// Mocks generated by Mockito 5.4.4 from annotations
// in rech_mobile_app_banco_imobiliario/test/features/jogadores/jogadores.teste.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i3;

import 'package:flutter/material.dart' as _i6;
import 'package:mobx/mobx.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rech_mobile_app_banco_imobiliario/app/features/erro/erro.controller.dart'
    as _i7;
import 'package:rech_mobile_app_banco_imobiliario/app/features/jogadores/jogadores.controller.dart'
    as _i4;
import 'package:rech_mobile_app_banco_imobiliario/app/models/jogador.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeObservableList_0<T> extends _i1.SmartFake
    implements _i2.ObservableList<T> {
  _FakeObservableList_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_1 extends _i1.SmartFake
    implements _i2.ReactiveContext {
  _FakeReactiveContext_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeColor_2 extends _i1.SmartFake implements _i3.Color {
  _FakeColor_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [JogadoresController].
///
/// See the documentation for Mockito's code generation for more information.
class MockJogadoresController extends _i1.Mock
    implements _i4.JogadoresController {
  @override
  _i2.ObservableList<_i5.Jogador> get jogadores => (super.noSuchMethod(
        Invocation.getter(#jogadores),
        returnValue: _FakeObservableList_0<_i5.Jogador>(
          this,
          Invocation.getter(#jogadores),
        ),
        returnValueForMissingStub: _FakeObservableList_0<_i5.Jogador>(
          this,
          Invocation.getter(#jogadores),
        ),
      ) as _i2.ObservableList<_i5.Jogador>);

  @override
  List<_i6.TextEditingController> get controllersTexto => (super.noSuchMethod(
        Invocation.getter(#controllersTexto),
        returnValue: <_i6.TextEditingController>[],
        returnValueForMissingStub: <_i6.TextEditingController>[],
      ) as List<_i6.TextEditingController>);

  @override
  _i2.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_1(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_1(
          this,
          Invocation.getter(#context),
        ),
      ) as _i2.ReactiveContext);

  @override
  _i3.Color corJogador(int? numeroJogador) => (super.noSuchMethod(
        Invocation.method(
          #corJogador,
          [numeroJogador],
        ),
        returnValue: _FakeColor_2(
          this,
          Invocation.method(
            #corJogador,
            [numeroJogador],
          ),
        ),
        returnValueForMissingStub: _FakeColor_2(
          this,
          Invocation.method(
            #corJogador,
            [numeroJogador],
          ),
        ),
      ) as _i3.Color);

  @override
  void adicionarJogador() => super.noSuchMethod(
        Invocation.method(
          #adicionarJogador,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removerJogador() => super.noSuchMethod(
        Invocation.method(
          #removerJogador,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void definirJogadores(_i6.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #definirJogadores,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetar() => super.noSuchMethod(
        Invocation.method(
          #resetar,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ErroController].
///
/// See the documentation for Mockito's code generation for more information.
class MockErroController extends _i1.Mock implements _i7.ErroController {
  @override
  set mensagem(String? value) => super.noSuchMethod(
        Invocation.setter(
          #mensagem,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_1(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_1(
          this,
          Invocation.getter(#context),
        ),
      ) as _i2.ReactiveContext);

  @override
  void registrarContexto(_i6.BuildContext? contexto) => super.noSuchMethod(
        Invocation.method(
          #registrarContexto,
          [contexto],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void capturarErro(_i6.FlutterErrorDetails? detalhes) => super.noSuchMethod(
        Invocation.method(
          #capturarErro,
          [detalhes],
        ),
        returnValueForMissingStub: null,
      );
}
